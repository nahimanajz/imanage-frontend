[{"/Volumes/D/Coding/imanage-react-app/src/screens/CreditPage.js":"1","/Volumes/D/Coding/imanage-react-app/src/helpers/userInfo.js":"2","/Volumes/D/Coding/imanage-react-app/src/components/Menu.js":"3","/Volumes/D/Coding/imanage-react-app/src/screens/LoginPage.js":"4","/Volumes/D/Coding/imanage-react-app/src/reducers/UserReducer.js":"5","/Volumes/D/Coding/imanage-react-app/src/store.js":"6","/Volumes/D/Coding/imanage-react-app/src/reducers/DebitReducer.js":"7","/Volumes/D/Coding/imanage-react-app/src/helpers/popups.js":"8","/Volumes/D/Coding/imanage-react-app/src/App.js":"9","/Volumes/D/Coding/imanage-react-app/src/screens/ExpensePage.js":"10","/Volumes/D/Coding/imanage-react-app/src/screens/DebitPage.js":"11","/Volumes/D/Coding/imanage-react-app/src/actions/CreditActions.js":"12","/Volumes/D/Coding/imanage-react-app/src/components/CreditForm.js":"13","/Volumes/D/Coding/imanage-react-app/src/actions/UserActions.js":"14","/Volumes/D/Coding/imanage-react-app/src/components/Pagination.js":"15","/Volumes/D/Coding/imanage-react-app/src/actions/DebitActions.js":"16","/Volumes/D/Coding/imanage-react-app/src/actions/ExpenseActions.js":"17","/Volumes/D/Coding/imanage-react-app/src/serverRoutes/index.js":"18","/Volumes/D/Coding/imanage-react-app/src/screens/RegisterPage.js":"19","/Volumes/D/Coding/imanage-react-app/src/reducers/ExpenseReducers.js":"20","/Volumes/D/Coding/imanage-react-app/src/constants/DebitConstants.js":"21","/Volumes/D/Coding/imanage-react-app/src/reducers/CreditReducer.js":"22","/Volumes/D/Coding/imanage-react-app/src/index.js":"23","/Volumes/D/Coding/imanage-react-app/src/components/FixHeader.js":"24","/Volumes/D/Coding/imanage-react-app/src/screens/HomePage.js":"25","/Volumes/D/Coding/imanage-react-app/src/constants/UserConstants.js":"26","/Volumes/D/Coding/imanage-react-app/src/constants/ExpenseConstants.js":"27","/Volumes/D/Coding/imanage-react-app/src/helpers/Loading.js":"28","/Volumes/D/Coding/imanage-react-app/src/constants/CreditConstants.js":"29","/Volumes/D/Coding/imanage-react-app/src/reducers/DepositReducer.js":"30","/Volumes/D/Coding/imanage-react-app/src/screens/DepositPage.js":"31","/Volumes/D/Coding/imanage-react-app/src/actions/DepositAction.js":"32"},{"size":4391,"mtime":1612044223932,"results":"33","hashOfConfig":"34"},{"size":310,"mtime":1612107880842,"results":"35","hashOfConfig":"34"},{"size":1327,"mtime":1612107827762,"results":"36","hashOfConfig":"34"},{"size":1920,"mtime":1611780101659,"results":"37","hashOfConfig":"34"},{"size":877,"mtime":1611612200090,"results":"38","hashOfConfig":"34"},{"size":778,"mtime":1612109221590,"results":"39","hashOfConfig":"34"},{"size":1273,"mtime":1611883982851,"results":"40","hashOfConfig":"34"},{"size":1002,"mtime":1611874834992,"results":"41","hashOfConfig":"34"},{"size":2348,"mtime":1612377272927,"results":"42","hashOfConfig":"34"},{"size":5155,"mtime":1612111381581,"results":"43","hashOfConfig":"34"},{"size":7259,"mtime":1612044242983,"results":"44","hashOfConfig":"34"},{"size":1889,"mtime":1611883781996,"results":"45","hashOfConfig":"34"},{"size":2483,"mtime":1611445969547,"results":"46","hashOfConfig":"34"},{"size":1245,"mtime":1611872061737,"results":"47","hashOfConfig":"34"},{"size":960,"mtime":1612044311677,"results":"48","hashOfConfig":"34"},{"size":1823,"mtime":1611884120506,"results":"49","hashOfConfig":"34"},{"size":1379,"mtime":1611875282526,"results":"50","hashOfConfig":"34"},{"size":251,"mtime":1610824575690,"results":"51","hashOfConfig":"34"},{"size":4325,"mtime":1611865015311,"results":"52","hashOfConfig":"34"},{"size":953,"mtime":1611874083994,"results":"53","hashOfConfig":"34"},{"size":484,"mtime":1611150169260,"results":"54","hashOfConfig":"34"},{"size":1379,"mtime":1611883816451,"results":"55","hashOfConfig":"34"},{"size":384,"mtime":1612060025207,"results":"56","hashOfConfig":"34"},{"size":272,"mtime":1611658249808,"results":"57","hashOfConfig":"34"},{"size":2394,"mtime":1612018815470,"results":"58","hashOfConfig":"34"},{"size":366,"mtime":1606643546814,"results":"59","hashOfConfig":"34"},{"size":390,"mtime":1611697350766,"results":"60","hashOfConfig":"34"},{"size":1576,"mtime":1611489751943,"results":"61","hashOfConfig":"34"},{"size":499,"mtime":1611157001212,"results":"62","hashOfConfig":"34"},{"size":491,"mtime":1612110862935,"results":"63","hashOfConfig":"34"},{"size":1656,"mtime":1612116238809,"results":"64","hashOfConfig":"34"},{"size":591,"mtime":1612118008474,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},"lx8wyt",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"80"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"80"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"80"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},"/Volumes/D/Coding/imanage-react-app/src/screens/CreditPage.js",["149","150","151"],"import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { listCredits, saveCreditPayment } from '../actions/CreditActions';\n\nimport{openModal, closeModal, togglePayModal, formatDate, payedAmount, closePayModal} from '../helpers/popups';\n\nimport { CreditForm } from '../components/CreditForm';\nimport {Pagination, makePages} from '../components/Pagination';\nimport { Loading } from '../helpers/Loading';\n\nfunction CreditPage(props) {\n    \n    const [credit_id, setCreditId] = useState(0);\n    const [amoutToPay, setAmountToPay] = useState(1);    \n\n    const allCredits = useSelector((state) => state.credits);\n    const { credits, creditsLoading } = allCredits;\n    const dispatch = useDispatch();\n    const getCreditId = (credit) => togglePayModal()? setCreditId(credit.id) : togglePayModal(); \n    \n    const handlerCreditPay = (e) => {\n        closePayModal();            \n            e.preventDefault();\n            const credit = {\n                credit_id: credit_id,\n                amount: amoutToPay\n            };\n            dispatch(saveCreditPayment(credit));\n        }\n        useEffect(()=>{\n            dispatch(listCredits());\n\n        }, []);\n        let count=0;\n\n        // pagingation \n        const [currentPage, setCurrentPage] =  useState(1);\n        const [creditsPerPage] = useState(7);\n\n        const paginate = pageNumber => setCurrentPage(pageNumber);\n        if(creditsLoading) {\n            return  <Loading />\n        }\n        \n    return (\n        <main>\n            <ul className=\"aside sidemenu white-box\">\n                <li> Credits</li>          \n                <li onClick={openModal}>Add Credits</li>            \n                {/* <li> New expense category</li>             */}                \n            </ul>\n            <ul className=\"container mr-3 white-box\">\n                <table className=\"f-w\" id=\"example\">\n                    <tr>\n                        <th>No</th>\n                        <th>Creditor</th>\n                        <th>phone</th>\n                        <th>Amount</th>\n                        <th>Current Payment</th>\n                        <th>Remaining Days To pay</th>\n                        <th>Actions</th>\n                    </tr>\n                    <tbody>                      \n                    { credits && credits.length > 0 &&\n                        makePages(credits, currentPage, creditsPerPage).map(credit => {\n                            return (\n                                <tr key={credit.id}>\n                                    <td> {++count} </td>\n                                    <td>{credit.creditor } </td>\n                                    <td>{credit.phone } </td>\n                                    <td>{credit.amount } </td>\n                                    <td> { payedAmount(credit.payedAmount)} </td>                                  \n                                    <td> { credit.remainingDays} </td>                                    \n                                    <td> <button className=\"button-sm\" onClick={ () => getCreditId(credit)}>Edit</button> </td>\n                            </tr> \n                            )\n                        })   \n                    }             \n                    </tbody>\n                </table>\n                <Pagination \n                     dataPerPage ={ creditsPerPage }\n                     totalData = {credits.length} \n                     paginate={ paginate }                    \n                />\n            </ul>\n           \n            \n            \n            <CreditForm />\n            <div className=\"modal-sm\">\n            <div className=\"modal-content\">\n                   <form className=\"form-container white-box\" onSubmit={handlerCreditPay}>\n                       <ul className=\"form\">\n                           <li>\n                               <label>Amount</label>\n                               <input type=\"text\" name=\"amountToPay\" onChange={(e) => setAmountToPay(e.target.value)}/>\n                           </li>\n                           <li>\n                               <button className=\"btn-sm\" type=\"submit\">Pay</button>\n                           </li>\n                       </ul>\n                   </form>\n               </div>,\n            </div>\n        </main>    \n    )\n}\nexport default CreditPage;","/Volumes/D/Coding/imanage-react-app/src/helpers/userInfo.js",[],"/Volumes/D/Coding/imanage-react-app/src/components/Menu.js",["152"],"/Volumes/D/Coding/imanage-react-app/src/screens/LoginPage.js",[],"/Volumes/D/Coding/imanage-react-app/src/reducers/UserReducer.js",[],["153","154"],"/Volumes/D/Coding/imanage-react-app/src/store.js",[],["155","156"],"/Volumes/D/Coding/imanage-react-app/src/reducers/DebitReducer.js",["157"],"import * as dc from '../constants/DebitConstants';\nconst debitInitState = { debits: [], isLoading:false, error:null,\n     debitsLoading: false, debitsError: null, isPayLoading: false, payError: null};\n\nexport default (state = debitInitState, action) => {\n    switch(action.type) { \n        // case dc.DEBIT_SAVE_REQUEST:            \n        //     return {isLoading:true};\n        case dc.DEBIT_SAVE_SUCCESS:            \n            return {isLoading: false, debits: [...state.debits, action.payload.debit]};\n        case dc.DEBIT_SAVE_FAIL:\n            return {isLoading: false, error: action.payload};\n        \n        case dc.DEBITS_LIST_REQUEST :\n            return {debitsLoading: true, debits: []};\n            \n        case dc.DEBITS_LIST_SUCCESS:\n            return {debitsLoading: false, debits: action.payload};\n\n        case dc.DEBITS_LIST_FAIL:\n            return {debitsLoading: false, debitsError: action.payload};\n\n        case dc.DEBIT_PAY_REQUEST :\n            return {isPayLoading: true, debits: []};\n\n        case dc.DEBIT_PAY_SUCCESS:\n            return {isPayLoading: false, debits: state.debits};\n\n        case dc.DEBIT_PAY_FAIL:\n            return {isPayLoading: false, payError: action.payload};\n\n        default:\n            return state;\n\n    }\n\n}","/Volumes/D/Coding/imanage-react-app/src/helpers/popups.js",[],"/Volumes/D/Coding/imanage-react-app/src/App.js",["158"],"/Volumes/D/Coding/imanage-react-app/src/screens/ExpensePage.js",["159","160","161","162","163","164"],"import { useEffect, useState } from \"react\";\nimport{openModal, closeModal} from '../helpers/popups';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {saveExpense, getExpenses} from '../actions/ExpenseActions';\nimport { headers, userInfo, user_id } from \"../helpers/userInfo\";\nimport moment from \"moment\";\nimport { FaSearch, FaWindowClose } from 'react-icons/fa';\nimport { Loading } from \"../helpers/Loading\";\n// import { Datatable } from \"../helpers/datatable\";\nimport {Pagination, makePages} from \"../components/Pagination\";\n    \nfunction ExpensePage(props) {\n\n    const [amount, setAmount] = useState('');\n    const [category, setCategory] = useState('');\n    const [description] = useState(\"DUMMY DESCRIPTION\")\n    const [query, setQuery] = useState(''); \n\n    const allExpenses = useSelector(state => state.expenses);\n    const {loading, error, expenses, expenseLoading, expensesError } = allExpenses;\n   \n    const dispatch = useDispatch();\n\n    const handleSubmit = (e) => {\n     e.preventDefault();     \n     dispatch(saveExpense(amount, category,user_id, description));\n    }\n    useEffect(() => dispatch(getExpenses()), []); \n    let count = 0;\n    //pagination\n    const [currentPage, setCurrentPage] =  useState(1);\n    const [expensesPerPage] = useState(7);\n\n    //  const indexOfLastExpense = currentPage * expensesPerPage ;\n    //  const indexOfFirstExpense = indexOfLastExpense - expensesPerPage;\n    //  const currentExpense = expenses.slice(indexOfFirstExpense, indexOfLastExpense);\n\n     const paginate = pageNumber => setCurrentPage(pageNumber);\n\n    if(loading) {\n        return  <Loading />\n    }\n    return (\n        <main>\n            <ul className=\"aside sidemenu white-box\">\n                <li> Expenditures</li>          \n                <li onClick={openModal}>Add expenditure</li>            \n                {/* <li> New expense category</li>             */}                \n            </ul>\n            <ul className=\"container white-box\">              \n              \n               { error && <div>{error}</div> }               \n                  \n                    <table className=\"f-w example\" id=\"example\">\n                        <tr>\n                            <th>No</th>\n                            <th>Date</th>\n                            <th>Category</th>\n                            <th>Amount</th>\n                        </tr>\n                               \n                        <tbody>\n                            \n                        {  expenses && expenses.length > 0 &&                 \n                            makePages(expenses, currentPage, expensesPerPage).map(expense => {\n                            return (\n                                <tr key={expense.id}>\n                                    <td> {++count} </td>\n                                    <td>{moment(expense.date).format(\"dddd, MMMM Do YYYY, h:mm:ss a\") || expense.created_At } </td>\n                                    <td>{expense.category}  </td>\n                                    <td>{expense.amount}  </td>\n                                    \n                                </tr>   \n                            )  \n                            })  \n                            }                        \n                        </tbody>\n                    </table>\n                <Pagination \n                    dataPerPage ={ expensesPerPage }\n                    totalData = {expenses.length} \n                    paginate={ paginate }                    \n                />    \n            </ul>\n            <div className=\"modal-bg\">\n                <div className=\"modal white-box\">\n\n                    <div className=\"bg-primary p-1\">\n                        <span onClick={closeModal} className=\"close\"> <FaWindowClose /></span>\n                        <h2 className=\"text-center\">Record Expense</h2>\n                    </div>                   \n                    {expenseLoading && <div className=\"warning\">expenseLoading</div>}\n                    {expensesError && <div className=\"warning\"> {expensesError}</div>}             \n                    <form className=\"container\" onSubmit={handleSubmit}>\n                        <ul className=\"form-container\">\n                        <li>\n                            <label htmlFor=\"amount\"> Amount </label>                          \n                            <input type=\"text\" name=\"amount\" id=\"amount\" onChange={(e)=> setAmount(e.target.value)} required/>\n                        </li>\n                        \n                        <li>\n                            <label htmlFor=\"category\">  Category </label>                          \n                            <input type=\"text\" name=\"category\" id=\"category\" onChange={(e)=> setCategory(e.target.value)} required/>\n                        </li>\n                        <li>\n                            <button type=\"submit\" className=\"button bg-primary\">SAVE</button>\n                        </li>\n\n                        </ul>\n                    </form>\n                </div>\n            </div>\n           \n        </main>    \n    )\n}\nexport default ExpensePage;","/Volumes/D/Coding/imanage-react-app/src/screens/DebitPage.js",["165","166"],"import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { listDebits, saveDebit, saveDebitPayment } from '../actions/DebitActions';\nimport {user_id} from \"../helpers/userInfo\"\nimport{openModal, closeModal, togglePayModal, formatDate, payedAmount, closePayModal} from '../helpers/popups';\n\nimport { Loading } from '../helpers/Loading';\nimport { FaWindowClose } from 'react-icons/fa';\nimport {Pagination, makePages } from '../components/Pagination';\n\n\nfunction DebitPage(props) {\n    const [debitor, setDebitor] = useState('');\n    const [phone, setPhone] = useState('');\n    const [timeToPay, setTimeToPay] = useState('');\n    const [amount, setAmount] = useState('');\n    const [amoutToPay, setAmountToPay] = useState('');\n    const [debitId, setDebitId] = useState(0);\n\n    const debitsList = useSelector((state)=>state.debits);\n    const { debits, isLoading, error, debitsLoading, debitsError } = debitsList;\n    const dispatch = useDispatch();\n\n    const eventHandler = (e) => {\n        e.preventDefault();    \n        const data = { debitor, phone, timeToPay:formatDate(timeToPay), amount, user_id };\n        dispatch(saveDebit(data));\n    };\n    const getDebitId = (debit) => togglePayModal()? setDebitId(debit.id) : togglePayModal(); \n \n    const handlerDebitPay = (e) => { \n        closePayModal();\n        e.preventDefault();\n        const debit = { debit_id: debitId, amount: amoutToPay };\n        dispatch(saveDebitPayment(debit));\n    }\n    useEffect(()=> dispatch(listDebits()), []);\n\n    let count = 0;\n     // pagingation\n     function pagination(){\n\n     }\n    const [currentPage, setCurrentPage] =  useState(1);\n    const [debitsPerPage] = useState(7);\n\n    //  const indexOfLastDebit = currentPage * debitsPerPage ;\n    //  const indexOfFirstDebit = indexOfLastDebit - debitsPerPage;\n    //  const someDebits =debits;\n    //  const currentDebits = someDebits.slice(indexOfFirstDebit, indexOfLastDebit);\n\n     const paginate = pageNumber => setCurrentPage(pageNumber);\n            \n\n    if(debitsLoading) {\n        return (\n            <Loading />\n        )\n    }\n    return (\n        <main>\n            <ul className=\"aside sidemenu white-box\">\n                <li> Debits</li>          \n                <li onClick={openModal}>Add debits</li>            \n                {/* <li> New expense category</li>             */}                \n            </ul>\n            <ul className=\"container white-box\">               \n                \n                {debitsError && <div>{debitsError}</div>}\n                <table className=\"f-w\" id=\"example\">\n                    <thead>\n                        <tr>\n                            <th>No</th>\n                            <th>Debitor</th>\n                            <th>phone</th>\n                            <th>Amount</th>\n                            <th>Current Payment</th>\n                            <th>Remaining Days To pay</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    \n                    { debits && debits.length > 0 &&\n                        makePages(debits, currentPage, debitsPerPage).map(debit => {\n                            return (\n                                <tr key={debit.id}>\n                                    <td>{++count}</td>\n                                    <td>{debit.debitor }</td>\n                                    <td>{debit.phone } </td>\n                                    <td>{debit.amount } </td>\n                                    <td> { payedAmount(debit.payedAmount)}</td>                                  \n                                    <td> { debit.remainingDays}</td>                                    \n                                    <td><button className=\"button-sm\" onClick={ () => getDebitId(debit)}>Edit</button></td>\n                            </tr> \n                            )\n                        })\n                    }\n                                            \n                    </tbody>\n                </table>\n\n                <Pagination \n                  dataPerPage ={ debitsPerPage }\n                  totalData = {debits.length} \n                  paginate={ paginate }                    \n                />\n            </ul>\n            <div className=\"modal-bg\">\n                <div className=\"modal white-box\">\n\n                    <div className=\"bg-primary p-1\">\n                        <span onClick={closeModal} className=\"close\"><FaWindowClose /></span>\n                        <h2 className=\"text-center\">Record A Debit</h2>\n                    </div>         \n                    <div>\n                        {isLoading && <div>Loading ...</div>}\n                    {error && <div> {error}</div>}\n                       \n                    </div>           \n                    <form className=\"container\" onSubmit={eventHandler}>\n                        <ul className=\"form-container\">\n                        <li>\n                            <label htmlFor=\"debitor\">  Debitor </label>                          \n                            <input type=\"text\" name=\"debitor\" id=\"debitor\" onChange={(e)=> setDebitor(e.target.value)} required/>\n                        </li>\n                        <li>\n                            <label htmlFor=\"phone\">  Phone </label>                          \n                            <input type=\"phone\" name=\"phone\" id=\"phone\" onChange={(e)=> setPhone(e.target.value)} required/>\n                        </li>\n                        <li>\n                            <label htmlFor=\"amount\"> Amount </label>                          \n                            <input type=\"number\" name=\"amount\" id=\"amount\" onChange={(e)=> setAmount(e.target.value)} required/>\n                        </li>\n                        <li>\n                            <label htmlFor=\"timeToPay\"> Payment Date </label>                          \n                            <input type=\"datetime-local\" name=\"timeToPay\" id=\"timeToPay\" onChange={(e)=> setTimeToPay(e.target.value)} required/>\n                        </li>                       \n                        \n                        <li>\n                            <button className=\"button bg-primary\" type=\"submit\">SAVE Debit</button>\n                        </li>\n\n                        </ul>\n                    </form>\n                </div>\n            </div>\n            <div className=\"modal-sm\">\n            {/* <div className=\"modal-content\"> */}\n                   <form className=\"form-container white-box\" onSubmit={handlerDebitPay}>\n                       <ul className=\"form\">\n                           <li>\n                               <label>Amount</label>\n                               <input type=\"text\" name=\"AmountToPay\" onChange={ (e) => setAmountToPay(e.target.value)} />\n                           </li>\n                           <li>\n                               <button className=\"btn-sm\">Pay</button>\n                           </li>\n                       </ul>\n                   </form>\n               {/* </div> */}\n            </div> \n        </main>    \n    )\n}\nexport default DebitPage;","/Volumes/D/Coding/imanage-react-app/src/actions/CreditActions.js",[],["167","168"],"/Volumes/D/Coding/imanage-react-app/src/components/CreditForm.js",[],["169","170"],"/Volumes/D/Coding/imanage-react-app/src/actions/UserActions.js",[],["171","172"],"/Volumes/D/Coding/imanage-react-app/src/components/Pagination.js",["173"],"/Volumes/D/Coding/imanage-react-app/src/actions/DebitActions.js",[],"/Volumes/D/Coding/imanage-react-app/src/actions/ExpenseActions.js",["174"],"import axios from 'axios';\nimport * as route from '../serverRoutes/index';\nimport * as ec from '../constants/ExpenseConstants';\nimport { headers, user_id} from '../helpers/userInfo';\nimport { toast } from 'react-toastify';\nimport { message } from '../helpers/popups';\n\nconst saveExpense = (amount,  category, user_id, description) => async(dispatch) => {\ntry {\n    const { data} = await axios.post(`${route.URL_INDEX}/expenses`, { amount, category, user_id, description }, { headers: headers});    \n    const errors = Object.entries(data.message);  \n    if(data.error === true){\n        return message(data, errors);\n    }else if( data.status === 400){\n     toast.warning(data.message);\n     }else {\n        dispatch({ type: ec.EXPENSE_SUCCESS_REQUEST, payload: data.expense })\n         toast.success(data.message);\n     }  \n\n} catch (error) {\n    dispatch({type: ec.EXPENSE_FAIL_REQUEST, payload: error.message});\n    toast.error(error.message);\n}\n}\nconst getExpenses = () => async (dispatch) => {\n    dispatch({type: ec.FECTCH_EXPENSES_REQUEST});\n    try {\n        const { data } = await axios.get(`${route.URL_INDEX}/expenses`, { headers: headers });   \n        dispatch({type:ec.FECTCH_EXPENSES_SUCCESS, payload: data});      \n        \n    } catch (error) {\n        dispatch({type: ec.FECTCH_EXPENSES_FAIL, payload: error.message});\n    }\n}\nexport {saveExpense, getExpenses};","/Volumes/D/Coding/imanage-react-app/src/serverRoutes/index.js",[],"/Volumes/D/Coding/imanage-react-app/src/screens/RegisterPage.js",["175","176","177"],"import React, {useEffect, useState} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {  Link} from \"react-router-dom\";\nimport { saveUser } from \"../actions/UserActions\";\nimport { useForm } from 'react-hook-form';\n\nfunction RegisterPage(props){\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [balance, setBalance] = useState('');\n    const[phone, setPhone] = useState('');\n    const [password, setPassword] = useState('');\n    const [password_confirmation, setPassword_confirmation] = useState('');\n    //const [message, setMessage] = useState('');\n\n    const { register, handleSubmit, watch, errors } = useForm();\n\n    const userRegister = useSelector(state => state.userRegister);\n    const { loading, userInfo, error } = userRegister;\n    const dispatch = useDispatch();\n    const redirect = props.location.search ? props.location.search.split(\"=\")[1]:'/register';\n    useEffect(()=> {\n        if(userInfo) {            \n           props.history.push(redirect);\n\n        }\n \n    },[userInfo]) //if user state info change then useEffect() will executes it's code\n    const submitHandler = (e) => {\n        e.preventDefault();\n        const data = {name, email, phone, balance, password, password_confirmation};\n        console.log(data);\n       dispatch(saveUser(data));\n    } \n    return ( \n        <main>\n            <div className=\"aside\">            \n             <ul>\n                { loading && <div>Please wait ...</div>}             \n                { error && <div>{ error } </div> }\n             </ul>    \n            </div>       \n            <form onSubmit={submitHandler} className=\"container\">                \n                <ul className=\"form-container\">\n                    <li className=\"text-center title\">Sign up </li>  \n                    <li>\n                        <label htmlFor=\"name\">  name </label>                          \n                        <input type=\"text\" name=\"name\" id=\"name\" onChange={(e)=> setName(e.target.value)} ref={register({ required: true,min: 2 })}/>\n                        <small>{errors.name && \"Name is required\"}</small>\n                    </li>\n                    <li>\n                        <label htmlFor=\"email\">  Email </label>                          \n                        <input type=\"email\" name=\"email\" id=\"email\" onChange={(e)=> setEmail(e.target.value)} ref={register({required: true, pattern: /^\\S+@\\S+$/i})} />\n                        <small>{errors.email && \"Email is required\"}</small>\n\n                    </li>\n                    <li>\n                        <label htmlFor=\"phone\">  Phone </label>                          \n                        <input type=\"text\" name=\"phone\" id=\"phone\" onChange={(e)=> setPhone(e.target.value)} ref={register({min:9, max:11 })}/>\n                        <small>{errors.phone && \"Phone is required\"}</small>\n\n                    </li>\n                    <li>\n                        <label htmlFor=\"phone\">  Balance </label>                          \n                        <input type=\"text\" name=\"balance\" id=\"balance\" onChange={(e)=> setBalance(e.target.value)} />\n                    </li>\n                    <li>\n                        <label htmlFor=\"password\">Password</label>\n                        <input type=\"password\" name=\"password\" id=\"password\" onChange={(e)=> setPassword(e.target.value)}/>\n                    </li>\n                    <li>\n                        <label htmlFor=\"rePassword\">confirm Password</label>\n                        <input type=\"password\" name=\"password_confirmation\" id=\"password_confirmation\" onChange={(e)=> setPassword_confirmation(e.target.value)}/>\n                    </li>\n                    <li>\n                        <button className=\"button primary\" type=\"submit\"> Register</button>\n                    </li>\n                    <li>\n                        <div className=\"flex-inline\">\n                            <label>Already has an Account ?</label> \n                            <label><Link to='/login' className=\"text-link\">   Sign in </Link></label>\n                        </div>\n                    </li>\n                    \n                </ul>\n            </form>\n      \n        </main>\n        \n   \n        \n    )\n} \nexport default RegisterPage;","/Volumes/D/Coding/imanage-react-app/src/reducers/ExpenseReducers.js",["178"],"\nimport * as ec from '../constants/ExpenseConstants';\n\nconst initialExpenses = { expenses: [], loading:false, error:null, expenseLoading: false, expensesError: null};\n\nexport default (state = initialExpenses, action) => {\n    switch(action.type) {\n        case ec.FECTCH_EXPENSES_REQUEST :\n            return {loading: true, expenses: [] };\n        case ec.FECTCH_EXPENSES_SUCCESS :\n            return {loading: false, expenses: action.payload};\n\n        case ec.FECTCH_EXPENSES_FAIL:\n            return {loading: false, error: action.payload};\n\n        case ec.EXPENSE_SUCCESS_REQUEST :\n            console.log(\"data from reducer\", action.payload);\n              \n            return { expenseLoading: false, expenses: [...state.expenses, action.payload] }; \n            \n        case ec.EXPENSE_FAIL_REQUEST :\n            \n            return {expenseLoading: false, expensesError: action.payload };\n        default: \n            return state; \n    }\n}\n","/Volumes/D/Coding/imanage-react-app/src/constants/DebitConstants.js",[],"/Volumes/D/Coding/imanage-react-app/src/reducers/CreditReducer.js",["179"],"import * as cc from '../constants/CreditConstants';\nconst creditInitState = { credits: [], isLoading:false, error:null,\n    creditsLoading: false, creditsError: null, isPayLoading: false, payError: null};\n\nexport default (state = creditInitState, action) => {\n    switch(action.type) {\n        // case cc.DEBIT_SAVE_REQUEST:            \n        //     return {isLoading:true};\n        case cc.CREDIT_SAVE_SUCCESS:           \n            return {isLoading: false, credits: [...state.credits, action.payload.Credit]};\n            \n        case cc.CREDIT_SAVE_FAIL:            \n            return {isLoading: false, error: action.payload};\n        \n        case cc.CREDIT_LIST_REQUEST :\n            return {creditsLoading: true, credits: []};\n\n        case cc.CREDIT_LIST_SUCCESS:            \n            return {creditsLoading: false, credits: action.payload};\n\n        case cc.CREDIT_LIST_FAIL:\n            return {creditsLoading: false, creditsError: action.payload.message};\n\n        case cc.CREDIT_PAY_REQUEST :\n            return {isPayLoading: true, credits: []};\n\n        case cc.CREDIT_PAY_SUCCESS:            \n            return {isPayLoading: false, credits: state.credits}; /** state credits does not reload */\n\n        case cc.CREDIT_PAY_FAIL:\n            return {isPayLoading: false, payError: action.payload};    \n\n        default:\n            return state;\n\n    }\n\n}","/Volumes/D/Coding/imanage-react-app/src/index.js",[],"/Volumes/D/Coding/imanage-react-app/src/components/FixHeader.js",[],["180","181"],"/Volumes/D/Coding/imanage-react-app/src/screens/HomePage.js",["182","183"],"import { useEffect } from \"react\";\nimport { userInfo } from \"../helpers/userInfo\";\n\n\nfunction HomePage(){\n    return (<div className=\"main\">\n                <div className=\"home-image\">\n                    <div className=\"content\">\n                        <h2>iManage helps you to:</h2>\n                        <ol>\n                            <li>Record Your expenses</li>\n                            <li>Manage Your personal loans </li>\n                            <li>Know Your debits and Credits</li>\n                        </ol>                      \n                    </div>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\" className=\"wave f-w\">\n                        <path fill=\"#28365567\" fill-opacity=\"1\" d=\"M0,160L60,170.7C120,181,240,203,360,181.3C480,160,600,96,720,74.7C840,53,960,75,1080,96C1200,117,1320,139,1380,149.3L1440,160L1440,320L1380,320C1320,320,1200,320,1080,320C960,320,840,320,720,320C600,320,480,320,360,320C240,320,120,320,60,320L0,320Z\"></path>\n                    </svg>             \n                </div>\n                <div className=\"main\">\n                    <h1 className=\"content text-center mt-5\">Why imanage</h1>\n                    <div className=\"three-col\">\n                        <div className=\"box animate\">\n                            <h2 className=\"title text-center\">Expenses</h2>\n                            <p> Sometimes it's really confusing to know How you used your money</p>\n                            <p>But it should no longer be a problem, iManage helps you to Calculate those expenditure</p>\n                        </div>\n                        <div className=\"box\">\n                        <h2 className=\"title text-center\">Debits</h2>\n                            <p>Calculate money you owe your friends and time to pay them before you look bad among them </p>\n                        </div>\n                        <div className=\"box\">\n                             <h2 className=\"title text-center\">Credits</h2>\n                             <p> Did anybody ask you to pay him then you don't recognize when ? and how much he gave you ?</p>\n                             <p> Use imanage to say Good bye to the confusions like those</p>\n                        </div>\n                    </div>\n                </div>                  \n            </div>    \n    )\n}\nexport default HomePage;","/Volumes/D/Coding/imanage-react-app/src/constants/UserConstants.js",[],"/Volumes/D/Coding/imanage-react-app/src/constants/ExpenseConstants.js",[],"/Volumes/D/Coding/imanage-react-app/src/helpers/Loading.js",[],["184","185"],"/Volumes/D/Coding/imanage-react-app/src/constants/CreditConstants.js",[],"/Volumes/D/Coding/imanage-react-app/src/reducers/DepositReducer.js",["186"],"const { act } = require(\"react-dom/test-utils\")\n\nconst initDeposit = {loading: false, deposits:[], error:null}\nconst DepositReducer =( state = initDeposit, action) => {\n    switch(action.type) {\n        case \"INCOME_SAVE_SUCCESS\":\n            return { loading:false, deposits:[...state.deposits, action.payload] };\n\n        case \"INCOME_SAVE_FAIL\":\n            return { loading:false, error: action.payload};\n        default: \n            return state;\n    }\n}\nexport default DepositReducer;","/Volumes/D/Coding/imanage-react-app/src/screens/DepositPage.js",["187"],"import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { saveIncome } from \"../actions/DepositAction\";\nimport { user_id } from \"../helpers/userInfo\";\nconst DepositPage = () => {\n    const [amount, setAmount] = useState(0);\n    const [currency, setCurrency] = useState(\"Rwf\");\n    const allDeposits = useSelector(state=> state.deposits);\n    const { error, deposits } = allDeposits;\n    const dispatch = useDispatch();\n\n    const handleDeposit =(e) => {\n        e.preventDefault();\n        dispatch(saveIncome({ amount, currency,user_id}));\n    }\n\n return(\n    <main> { error && <div> {error}</div>}\n    \n        {/* <div className=\"modal-sm\"> */}\n        <div className=\"modal-content\">\n                <form className=\"form-container white-box\" onSubmit={handleDeposit}>\n                    <ul className=\"form\">                      \n        \n                        <li>\n                            <label>Amount</label>\n                            <input type=\"number\" name=\"amount\" onChange={(e) => setAmount(e.target.value)} required/>\n                        </li>\n                        <li>\n                            <label>Currecy</label>\n                            <input type=\"text\" name=\"currency\" value={currency} onChange={(e) => setCurrency(e.target.value)} required/>\n                        </li>\n                        <li>\n                            <button className=\"btn-sm\" type=\"submit\">Record Income</button>\n                        </li>\n                    </ul>\n                </form>\n            </div>\n        {/* </div> */}\n\n    </main>\n )\n}\nexport default DepositPage;","/Volumes/D/Coding/imanage-react-app/src/actions/DepositAction.js",["188"],"import { message } from \"../helpers/popups\";\nimport { toast } from \"react-toastify\";\nimport axios from 'axios';\nimport { headers, user_id } from \"../helpers/userInfo\";\nimport  { URL_INDEX }   from \"../serverRoutes\";\n\nconst saveIncome= (depositData)=>async(dispatch)=> {\n   \ntry {\n    const { data } = await axios.post(`${URL_INDEX}/deposit`, depositData, { headers:headers });\n    // toast.success(data.message);\n    dispatch({type: \" INCOME_SAVE_SUCCESS \", payload: data});\n    return message(data, data.message);\n} catch (error) {\n    toast.error(error.message);\n}\n}\nexport { saveIncome };",{"ruleId":"189","severity":1,"message":"190","line":5,"column":19,"nodeType":"191","messageId":"192","endLine":5,"endColumn":29},{"ruleId":"189","severity":1,"message":"193","line":5,"column":47,"nodeType":"191","messageId":"192","endLine":5,"endColumn":57},{"ruleId":"194","severity":1,"message":"195","line":33,"column":12,"nodeType":"196","endLine":33,"endColumn":14,"suggestions":"197"},{"ruleId":"189","severity":1,"message":"198","line":4,"column":10,"nodeType":"191","messageId":"192","endLine":4,"endColumn":19},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"199","replacedBy":"203"},{"ruleId":"201","replacedBy":"204"},{"ruleId":"205","severity":1,"message":"206","line":5,"column":1,"nodeType":"207","endLine":37,"endColumn":2},{"ruleId":"189","severity":1,"message":"208","line":16,"column":10,"nodeType":"191","messageId":"192","endLine":16,"endColumn":19},{"ruleId":"189","severity":1,"message":"209","line":5,"column":10,"nodeType":"191","messageId":"192","endLine":5,"endColumn":17},{"ruleId":"189","severity":1,"message":"210","line":5,"column":19,"nodeType":"191","messageId":"192","endLine":5,"endColumn":27},{"ruleId":"189","severity":1,"message":"211","line":7,"column":10,"nodeType":"191","messageId":"192","endLine":7,"endColumn":18},{"ruleId":"189","severity":1,"message":"212","line":17,"column":12,"nodeType":"191","messageId":"192","endLine":17,"endColumn":17},{"ruleId":"189","severity":1,"message":"213","line":17,"column":19,"nodeType":"191","messageId":"192","endLine":17,"endColumn":27},{"ruleId":"194","severity":1,"message":"195","line":28,"column":46,"nodeType":"196","endLine":28,"endColumn":48,"suggestions":"214"},{"ruleId":"194","severity":1,"message":"195","line":37,"column":44,"nodeType":"196","endLine":37,"endColumn":46,"suggestions":"215"},{"ruleId":"189","severity":1,"message":"216","line":41,"column":15,"nodeType":"191","messageId":"192","endLine":41,"endColumn":25},{"ruleId":"199","replacedBy":"217"},{"ruleId":"201","replacedBy":"218"},{"ruleId":"199","replacedBy":"219"},{"ruleId":"201","replacedBy":"220"},{"ruleId":"199","replacedBy":"221"},{"ruleId":"201","replacedBy":"222"},{"ruleId":"223","severity":1,"message":"224","line":18,"column":20,"nodeType":"225","endLine":18,"endColumn":81},{"ruleId":"189","severity":1,"message":"226","line":4,"column":19,"nodeType":"191","messageId":"192","endLine":4,"endColumn":26},{"ruleId":"189","severity":1,"message":"227","line":16,"column":23,"nodeType":"191","messageId":"192","endLine":16,"endColumn":35},{"ruleId":"189","severity":1,"message":"228","line":16,"column":37,"nodeType":"191","messageId":"192","endLine":16,"endColumn":42},{"ruleId":"194","severity":1,"message":"229","line":28,"column":7,"nodeType":"196","endLine":28,"endColumn":17,"suggestions":"230"},{"ruleId":"205","severity":1,"message":"206","line":6,"column":1,"nodeType":"207","endLine":27,"endColumn":2},{"ruleId":"205","severity":1,"message":"206","line":5,"column":1,"nodeType":"207","endLine":38,"endColumn":2},{"ruleId":"199","replacedBy":"231"},{"ruleId":"201","replacedBy":"232"},{"ruleId":"189","severity":1,"message":"233","line":1,"column":10,"nodeType":"191","messageId":"192","endLine":1,"endColumn":19},{"ruleId":"189","severity":1,"message":"210","line":2,"column":10,"nodeType":"191","messageId":"192","endLine":2,"endColumn":18},{"ruleId":"199","replacedBy":"234"},{"ruleId":"201","replacedBy":"235"},{"ruleId":"189","severity":1,"message":"236","line":1,"column":9,"nodeType":"191","messageId":"192","endLine":1,"endColumn":12},{"ruleId":"189","severity":1,"message":"237","line":9,"column":20,"nodeType":"191","messageId":"192","endLine":9,"endColumn":28},{"ruleId":"189","severity":1,"message":"226","line":4,"column":19,"nodeType":"191","messageId":"192","endLine":4,"endColumn":26},"no-unused-vars","'closeModal' is defined but never used.","Identifier","unusedVar","'formatDate' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["238"],"'VscSignIn' is defined but never used.","no-native-reassign",["239"],"no-negated-in-lhs",["240"],["239"],["240"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'FixHeader' is defined but never used.","'headers' is defined but never used.","'userInfo' is defined but never used.","'FaSearch' is defined but never used.","'query' is assigned a value but never used.","'setQuery' is assigned a value but never used.",["241"],["242"],"'pagination' is defined but never used.",["239"],["240"],["239"],["240"],["239"],["240"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'user_id' is defined but never used.","'handleSubmit' is assigned a value but never used.","'watch' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.history' and 'redirect'. Either include them or remove the dependency array.",["243"],["239"],["240"],"'useEffect' is defined but never used.",["239"],["240"],"'act' is assigned a value but never used.","'deposits' is assigned a value but never used.",{"desc":"244","fix":"245"},"no-global-assign","no-unsafe-negation",{"desc":"244","fix":"246"},{"desc":"244","fix":"247"},{"desc":"248","fix":"249"},"Update the dependencies array to be: [dispatch]",{"range":"250","text":"251"},{"range":"252","text":"251"},{"range":"253","text":"251"},"Update the dependencies array to be: [props.history, redirect, userInfo]",{"range":"254","text":"255"},[1208,1210],"[dispatch]",[1144,1146],[1543,1545],[1060,1070],"[props.history, redirect, userInfo]"]