[{"/Volumes/D/Coding/imanage-react-app/src/screens/CreditPage.js":"1","/Volumes/D/Coding/imanage-react-app/src/helpers/userInfo.js":"2","/Volumes/D/Coding/imanage-react-app/src/components/Menu.js":"3","/Volumes/D/Coding/imanage-react-app/src/screens/LoginPage.js":"4","/Volumes/D/Coding/imanage-react-app/src/reducers/UserReducer.js":"5","/Volumes/D/Coding/imanage-react-app/src/store.js":"6","/Volumes/D/Coding/imanage-react-app/src/reducers/DebitReducer.js":"7","/Volumes/D/Coding/imanage-react-app/src/helpers/popups.js":"8","/Volumes/D/Coding/imanage-react-app/src/App.js":"9","/Volumes/D/Coding/imanage-react-app/src/screens/ExpensePage.js":"10","/Volumes/D/Coding/imanage-react-app/src/screens/DebitPage.js":"11","/Volumes/D/Coding/imanage-react-app/src/actions/CreditActions.js":"12","/Volumes/D/Coding/imanage-react-app/src/components/CreditForm.js":"13","/Volumes/D/Coding/imanage-react-app/src/actions/UserActions.js":"14","/Volumes/D/Coding/imanage-react-app/src/components/Pagination.js":"15","/Volumes/D/Coding/imanage-react-app/src/actions/DebitActions.js":"16","/Volumes/D/Coding/imanage-react-app/src/actions/ExpenseActions.js":"17","/Volumes/D/Coding/imanage-react-app/src/serverRoutes/index.js":"18","/Volumes/D/Coding/imanage-react-app/src/screens/RegisterPage.js":"19","/Volumes/D/Coding/imanage-react-app/src/reducers/ExpenseReducers.js":"20","/Volumes/D/Coding/imanage-react-app/src/constants/DebitConstants.js":"21","/Volumes/D/Coding/imanage-react-app/src/reducers/CreditReducer.js":"22"},{"size":4431,"mtime":1611608572484,"results":"23","hashOfConfig":"24"},{"size":521,"mtime":1611616361480,"results":"25","hashOfConfig":"24"},{"size":1244,"mtime":1611615337954,"results":"26","hashOfConfig":"24"},{"size":2266,"mtime":1611617727356,"results":"27","hashOfConfig":"24"},{"size":877,"mtime":1611612200090,"results":"28","hashOfConfig":"24"},{"size":714,"mtime":1611612506620,"results":"29","hashOfConfig":"24"},{"size":1243,"mtime":1611149983752,"results":"30","hashOfConfig":"24"},{"size":912,"mtime":1611613540296,"results":"31","hashOfConfig":"24"},{"size":2231,"mtime":1611617412723,"results":"32","hashOfConfig":"24"},{"size":4125,"mtime":1611608572485,"results":"33","hashOfConfig":"24"},{"size":6411,"mtime":1611608572484,"results":"34","hashOfConfig":"24"},{"size":1610,"mtime":1611158784259,"results":"35","hashOfConfig":"24"},{"size":2483,"mtime":1611445969547,"results":"36","hashOfConfig":"24"},{"size":1411,"mtime":1610997005711,"results":"37","hashOfConfig":"24"},{"size":669,"mtime":1611256921758,"results":"38","hashOfConfig":"24"},{"size":1595,"mtime":1611154051202,"results":"39","hashOfConfig":"24"},{"size":1246,"mtime":1611608572483,"results":"40","hashOfConfig":"24"},{"size":251,"mtime":1610824575690,"results":"41","hashOfConfig":"24"},{"size":3798,"mtime":1611536185935,"results":"42","hashOfConfig":"24"},{"size":948,"mtime":1611608572484,"results":"43","hashOfConfig":"24"},{"size":484,"mtime":1611150169260,"results":"44","hashOfConfig":"24"},{"size":1275,"mtime":1611608572483,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},"lx8wyt",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"55"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"79"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"79"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Volumes/D/Coding/imanage-react-app/src/screens/CreditPage.js",["102","103","104"],"import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { listCredits, saveCreditPayment } from '../actions/CreditActions';\n\nimport{openModal, closeModal, openPayModal, formatDate, payedAmount} from '../helpers/popups';\nimport { CreditForm } from '../components/CreditForm';\nimport Pagination from '../components/Pagination';\nimport { Loading } from '../helpers/Loading';\n\nfunction CreditPage(props) {\n    \n    const [credit_id, setCreditId] = useState(0);\n    const [amoutToPay, setAmountToPay] = useState(1);\n\n    const [currentPage, setCurrentPage] =  useState(1);\n    const [creditsPerPage] = useState(1);\n\n    const allCredits = useSelector((state) => state.credits);\n    const { credits, creditsLoading } = allCredits;\n    const dispatch = useDispatch();\n    const getCreditId = (credit) => openPayModal()? setCreditId(credit.id) : openPayModal(); \n    \n    const handlerCreditPay = (e) => {\n            e.preventDefault();\n            const credit = {\n                credit_id: credit_id,\n                amount: amoutToPay\n            };\n            dispatch(saveCreditPayment(credit));\n        }\n        useEffect(()=>{\n            dispatch(listCredits());\n\n        }, []);\n        let count=0;\n\n        //pagingation \n        const indexOfLastCredit = currentPage * creditsPerPage ;\n        const indexOfFirstCredit = indexOfLastCredit - creditsPerPage;\n        const currentCredit = credits.slice(indexOfFirstCredit, indexOfLastCredit);\n\n        const paginate = pageNumber => setCurrentPage(pageNumber);\n        if(creditsLoading) {\n            return  <Loading />\n        }\n        \n    return (\n        <main>\n            <ul className=\"aside sidemenu white-box\">\n                <li> Credits</li>          \n                <li onClick={openModal}>Add Credits</li>            \n                {/* <li> New expense category</li>             */}                \n            </ul>\n            <ul className=\"container mr-3\">\n                <table className=\"f-w white-box\">\n                    <tr>\n                        <th>No</th>\n                        <th>Creditor</th>\n                        <th>phone</th>\n                        <th>Amount</th>\n                        <th>Current Payment</th>\n                        <th>Remaining Days To pay</th>\n                        <th>Actions</th>\n                    </tr>\n                    <tbody>                      \n                    { credits && credits.length > 0 &&\n                        currentCredit.map(credit => {\n                            return (\n                                <tr key={credit.id}>\n                                    <td> {++count} </td>\n                                    <td>{credit.creditor } </td>\n                                    <td>{credit.phone } </td>\n                                    <td>{credit.amount } </td>\n                                    <td> { payedAmount(credit.payedAmount)} </td>                                  \n                                    <td> { credit.remainingDays} </td>                                    \n                                    <td> <button className=\"button-sm\" onClick={ () => getCreditId(credit)}>Edit</button> </td>\n                            </tr> \n                            )\n                        })   \n                    }             \n                    </tbody>\n                </table>\n                <Pagination \n                     creditsPerCredit ={ creditsPerPage }\n                     totalCredits = {credits.length} \n                     paginate={ paginate }\n                />\n\n            </ul>\n            <CreditForm />\n            <div className=\"modal-sm\">\n            <div className=\"modal-content\">\n                   <form className=\"form-container white-box\" onSubmit={handlerCreditPay}>\n                       <ul className=\"form\">\n                           <li>\n                               <label>Amount</label>\n                               <input type=\"text\" name=\"amountToPay\" onChange={(e) => setAmountToPay(e.target.value)}/>\n                           </li>\n                           <li>\n                               <button className=\"btn-sm\" type=\"submit\">Pay</button>\n                           </li>\n                       </ul>\n                   </form>\n               </div>,\n            </div>\n        </main>    \n    )\n}\nexport default CreditPage;",["105","106"],"/Volumes/D/Coding/imanage-react-app/src/helpers/userInfo.js",[],"/Volumes/D/Coding/imanage-react-app/src/components/Menu.js",["107"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { name } from '../helpers/userInfo';\nimport { VscSignIn, VscAccount } from \"react-icons/vsc\";\nimport { AiOutlineLogin } from \"react-icons/ai\";\nimport { toggleSidebar } from '../helpers/popups';\nconst Menu = () => {  \n    if(name !==null) {\n      return (\n          <>\n        <ul className=\"menu-item\">\n            <li> <Link to=\"credits\" class=\"menu\"> Credits </Link> </li>  \n            <li> <Link to=\"debits\" class=\"menu\"> Debits </Link>  </li>\n            <li> <Link to=\"expenses\" class=\"menu\"> Expense </Link>  </li> \n        </ul>\n        <ul className=\"menu-item\">\n             <Link to=\"expenses\" class=\"menu\"> <VscAccount onClick={toggleSidebar}/> </Link>  {/** here for signout */}\n        </ul>\n        </>\n      )\n    } else {\n        return (\n            <>\n            <ul className=\"menu-item\">                 \n                <li> <Link to=\"/register\" class=\"menu\"> Join</Link>   </li>\n            </ul>\n            <ul className=\"menu-item\"> {/** for signin */}\n            <Link to=\"login\" class=\"menu\"> <AiOutlineLogin height='320px'/> </Link>  {/** here for signout */}\n\n            </ul>\n            </>\n        )\n    }\n    \n}\nexport default Menu;",["108","109"],"/Volumes/D/Coding/imanage-react-app/src/screens/LoginPage.js",["110","111"],"import React, { useEffect, useState} from 'react';\nimport {Link, useRouteMatch} from \"react-router-dom\";\nimport { useSelector,useDispatch } from \"react-redux\";\nimport { login } from \"../actions/UserActions\";\n\nfunction LoginPage(props){\n    const [email, setEmail ] =  useState('');\n    const [password, setPassword ] = useState('');\n\n    const userSigned = useSelector( (state) => state.userLogin);\n    const {isLoading, userInfo} = userSigned;\n    const redirect = props.location.search ? props.location.search.split(\"=\")[1]:\"/expenses\"; \n    const dispatch = useDispatch();\n\n    const submitHandler = (e)=> {\n        e.preventDefault();\n        dispatch(login(email, password));\n    } \n    useEffect(()=> (userInfo && isLoading === false) ? props.history.push(redirect):''  , [userInfo]);\n    return ( \n        <main>\n            <div className=\"aside\">            \n                           \n            </div>\n            <form onSubmit={submitHandler} className=\"container\">\n            <ul className=\"form-container\">\n                <li>\n                    <h2 className=\"text-center\">Login</h2>\n                </li>\n                <li>                        \n                {/* { error && <div> { error } </div> } */}\n                \n                </li>\n                <li>\n                    <label htmlFor=\"email\">  Email </label>                          \n                    <input type=\"email\" name=\"email\" id=\"email\" onChange={(e)=> setEmail(e.target.value)} />\n                </li>\n                <li>\n                    <label htmlFor=\"password\">Password</label>\n                    <input type=\"password\" name=\"password\" id=\"password\" onChange={(e)=>setPassword(e.target.value)} />\n                </li>\n                <li>\n                    <button className=\"button primary\" type=\"submit\"> Sign in</button>\n                </li>\n                <li>                \n                    <div className=\"flex-inline\">\n                        <label>New to iManage?</label> \n                        <label><Link to='/register' className=\"text-link\">   Sign up </Link></label>\n                    </div>\n                </li>\n            </ul>\n        </form>\n        </main>\n           \n            \n    )\n}\nexport default LoginPage;","/Volumes/D/Coding/imanage-react-app/src/reducers/UserReducer.js",[],"/Volumes/D/Coding/imanage-react-app/src/store.js",[],["112","113"],"/Volumes/D/Coding/imanage-react-app/src/reducers/DebitReducer.js",["114"],"/Volumes/D/Coding/imanage-react-app/src/helpers/popups.js",[],"/Volumes/D/Coding/imanage-react-app/src/App.js",["115","116","117"],"/Volumes/D/Coding/imanage-react-app/src/screens/ExpensePage.js",["118","119","120"],"import { useEffect, useState } from \"react\";\nimport{openModal, closeModal} from '../helpers/popups';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {saveExpense, getExpenses} from '../actions/ExpenseActions';\nimport { headers, userInfo, user_id } from \"../helpers/userInfo\";\nimport moment from \"moment\";\nimport { FaWindowClose } from 'react-icons/fa';\nimport { Loading } from \"../helpers/Loading\";\n\n\nfunction ExpensePage(props) {\n    const [amount, setAmount] = useState('');\n    const [category, setCategory] = useState('');\n\n    const allExpenses = useSelector(state => state.expenses);\n    const {loading, error, expenses, expenseLoading, expensesError } = allExpenses;\n   \n    const dispatch = useDispatch();\n\n    const handleSubmit = (e) => {\n     e.preventDefault();     \n     dispatch(saveExpense(amount, category, user_id));\n    }\n    useEffect(()=> dispatch(getExpenses()), []); \n    let count = 0;\n\n    if(loading) {\n        return  <Loading />\n    }\n    return (\n        <main>\n            <ul className=\"aside sidemenu white-box\">\n                <li> Expenditures</li>          \n                <li onClick={openModal}>Add expenditure</li>            \n                {/* <li> New expense category</li>             */}                \n            </ul>\n            <ul className=\"container\">\n                {error && <div>{error}</div> }               \n                  \n                    <table className=\"f-w white-box mr-3 purple\">\n                    <tr>\n                        <th>No</th>\n                        <th>Date</th>\n                        <th>Category</th>\n                        <th>Amount</th>\n                    </tr>\n                               \n                    <tbody>\n                       {  expenses && expenses.length > 0 &&                 \n                          expenses.map(expense => {\n                          return (\n                            <tr key={expense.id}>\n                                <td> {++count} </td>\n                                <td>{moment(expense.date).format(\"dddd, MMMM Do YYYY, h:mm:ss a\") || expense.created_At } </td>\n                                <td>{expense.category}  </td>\n                                <td>{expense.amount}  </td>\n                                \n                           </tr>   \n                          )  \n                         })  \n                        }                        \n                    </tbody>\n                </table>\n              \n               \n            </ul>\n            <div className=\"modal-bg\">\n                <div className=\"modal white-box\">\n\n                    <div className=\"bg-primary p-1\">\n                        <span onClick={closeModal} className=\"close\"> <FaWindowClose /></span>\n                        <h2 className=\"text-center\">Record Expense</h2>\n                    </div>                   \n                    {expenseLoading && <div className=\"warning\">expenseLoading</div>}\n                    {expensesError && <div className=\"warning\"> {expensesError}</div>}             \n                    <form className=\"container\" onSubmit={handleSubmit}>\n                        <ul className=\"form-container\">\n                        <li>\n                            <label htmlFor=\"amount\"> Amount </label>                          \n                            <input type=\"text\" name=\"amount\" id=\"amount\" onChange={(e)=> setAmount(e.target.value)} required/>\n                        </li>\n                        \n                        <li>\n                            <label htmlFor=\"category\">  Category </label>                          \n                            <input type=\"text\" name=\"category\" id=\"category\" onChange={(e)=> setCategory(e.target.value)} required/>\n                        </li>\n                        <li>\n                            <button type=\"submit\" className=\"button bg-primary\">SAVE</button>\n                        </li>\n\n                        </ul>\n                    </form>\n                </div>\n            </div>\n           \n        </main>    \n    )\n}\nexport default ExpensePage;","/Volumes/D/Coding/imanage-react-app/src/screens/DebitPage.js",["121"],"import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { listDebits, saveDebit, saveDebitPayment } from '../actions/DebitActions';\nimport {user_id} from \"../helpers/userInfo\"\nimport{openModal, closeModal, openPayModal, formatDate, payedAmount} from '../helpers/popups';\nimport { Loading } from '../helpers/Loading';\nimport { FaWindowClose } from 'react-icons/fa';\n\n\nfunction DebitPage(props) {\n    const [debitor, setDebitor] = useState('');\n    const [phone, setPhone] = useState('');\n    const [timeToPay, setTimeToPay] = useState('');\n    const [amount, setAmount] = useState('');\n    const [amoutToPay, setAmountToPay] = useState('');\n    const [debitId, setDebitId] = useState(0);\n\n    const debitsList = useSelector((state)=>state.debits);\n    const { debits, isLoading, error, debitsLoading, debitsError } = debitsList;\n    const dispatch = useDispatch();\n\n    const eventHandler = (e) => {\n        e.preventDefault();    \n        const data = { debitor, phone, timeToPay:formatDate(timeToPay), amount, user_id };\n        dispatch(saveDebit(data));\n    };\n    const getDebitId = (debit) => openPayModal()? setDebitId(debit.id) : openPayModal(); \n \n    const handlerDebitPay = (e) => {\n        e.preventDefault();\n        const debit = { debit_id: debitId, amount: amoutToPay };\n        dispatch(saveDebitPayment(debit));\n    }\n    useEffect(()=> dispatch(listDebits()), []);\n\n    let count = 0;\n    if(debitsLoading) {\n        return (\n            <Loading />\n        )\n    }\n    return (\n        <main>\n            <ul className=\"aside sidemenu white-box\">\n                <li> Debits</li>          \n                <li onClick={openModal}>Add debits</li>            \n                {/* <li> New expense category</li>             */}                \n            </ul>\n            <ul className=\"container\">               \n                \n                {debitsError && <div>{debitsError}</div>}\n                <table className=\"f-w white-box mr-3\">\n                    <thead>\n                        <tr>\n                            <th>No</th>\n                            <th>Debitor</th>\n                            <th>phone</th>\n                            <th>Amount</th>\n                            <th>Current Payment</th>\n                            <th>Remaining Days To pay</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    \n                    { debits && debits.length > 0 &&\n                        debits.map(debit => {\n                            return (\n                                <tr key={debit.id}>\n                                    <td>{++count}</td>\n                                    <td>{debit.debitor }</td>\n                                    <td>{debit.phone } </td>\n                                    <td>{debit.amount } </td>\n                                    <td> { payedAmount(debit.payedAmount)}</td>                                  \n                                    <td> { debit.remainingDays}</td>                                    \n                                    <td><button className=\"button-sm\" onClick={ () => getDebitId(debit)}>Edit</button></td>\n                            </tr> \n                            )\n                        })\n                    }\n                                            \n                    </tbody>\n                </table>\n            </ul>\n            <div className=\"modal-bg\">\n                <div className=\"modal white-box\">\n\n                    <div className=\"bg-primary p-1\">\n                        <span onClick={closeModal} className=\"close\"><FaWindowClose /></span>\n                        <h2 className=\"text-center\">Record A Debit</h2>\n                    </div>         \n                    <div>\n                        {isLoading && <div>Loading ...</div>}\n                    {error && <div> {error}</div>}\n                       \n                    </div>           \n                    <form className=\"container\" onSubmit={eventHandler}>\n                        <ul className=\"form-container\">\n                        <li>\n                            <label htmlFor=\"debitor\">  Debitor </label>                          \n                            <input type=\"text\" name=\"debitor\" id=\"debitor\" onChange={(e)=> setDebitor(e.target.value)} required/>\n                        </li>\n                        <li>\n                            <label htmlFor=\"phone\">  Phone </label>                          \n                            <input type=\"phone\" name=\"phone\" id=\"phone\" onChange={(e)=> setPhone(e.target.value)} required/>\n                        </li>\n                        <li>\n                            <label htmlFor=\"amount\"> Amount </label>                          \n                            <input type=\"number\" name=\"amount\" id=\"amount\" onChange={(e)=> setAmount(e.target.value)} required/>\n                        </li>\n                        <li>\n                            <label htmlFor=\"timeToPay\"> Payment Date </label>                          \n                            <input type=\"datetime-local\" name=\"timeToPay\" id=\"timeToPay\" onChange={(e)=> setTimeToPay(e.target.value)} required/>\n                        </li>                       \n                        \n                        <li>\n                            <button className=\"button bg-primary\" type=\"submit\">SAVE Debit</button>\n                        </li>\n\n                        </ul>\n                    </form>\n                </div>\n            </div>\n            <div className=\"modal-sm\">\n            {/* <div className=\"modal-content\"> */}\n                   <form className=\"form-container white-box\" onSubmit={handlerDebitPay}>\n                       <ul className=\"form\">\n                           <li>\n                               <label>Amount</label>\n                               <input type=\"text\" name=\"AmountToPay\" onChange={ (e) => setAmountToPay(e.target.value)} />\n                           </li>\n                           <li>\n                               <button className=\"btn-sm\">Pay</button>\n                           </li>\n                       </ul>\n                   </form>\n               {/* </div> */}\n            </div> \n        </main>    \n    )\n}\nexport default DebitPage;",["122","123"],"/Volumes/D/Coding/imanage-react-app/src/actions/CreditActions.js",[],["124","125"],"/Volumes/D/Coding/imanage-react-app/src/components/CreditForm.js",[],"/Volumes/D/Coding/imanage-react-app/src/actions/UserActions.js",[],"/Volumes/D/Coding/imanage-react-app/src/components/Pagination.js",["126"],"import React from 'react';\n\nconst Pagination = ({creditsPerCredit, totalCredits, paginate}) => {\n    const pageNumbers = [];\n    for (let i = 0; i < Math.ceil(totalCredits /  creditsPerCredit); i++) {\n        pageNumbers.push(i);\n    }\n    return (        \n        <div className=\"f-w\"> {\n               pageNumbers.map(number =>(\n                   <li key={ number } className=\"page-item p-1\"> \n                   <a onClick={ () => paginate(number) } className=\"page-links\">\n                       { ++number }\n                       \n                   </a>\n                   </li>\n               ))\n            }\n        </div>\n    )\n\n}\nexport default Pagination;","/Volumes/D/Coding/imanage-react-app/src/actions/DebitActions.js",[],"/Volumes/D/Coding/imanage-react-app/src/actions/ExpenseActions.js",["127"],"import axios from 'axios';\nimport * as route from '../serverRoutes/index';\nimport * as ec from '../constants/ExpenseConstants';\nimport { headers, user_id} from '../helpers/userInfo';\nimport { toast } from 'react-toastify';\n\nconst saveExpense = (amount,  category, user_id ) => async(dispatch) => {\ndispatch({type: ec.EXPENSE_REGISTER_REQUEST, payload:{ amount,  category, user_id}});\ntry {\n    const { data } = await axios.post(route.URL_INDEX+\"/expenses\", {amount, category, user_id}, { headers: headers});\n   \n    dispatch({type: ec.EXPENSE_SUCCESS_REQUEST, payload: data.expense});\n   \n    console.log(JSON.stringify(data.message));\n    toast.success(data.message);\n} catch (error) {\n    console.error(error);\n    dispatch({type: ec.EXPENSE_FAIL_REQUEST, payload: error.message});\n    toast.error(error.message);\n}\n}\nconst getExpenses = () => async (dispatch) => {\n    dispatch({type: ec.FECTCH_EXPENSES_REQUEST});\n    try {\n        const { data } = await axios.get(route.URL_INDEX+\"/expenses\", { headers: headers });   \n        dispatch({type:ec.FECTCH_EXPENSES_SUCCESS, payload: data});      \n        \n    } catch (error) {\n        dispatch({type: ec.FECTCH_EXPENSES_FAIL, payload: error.message});\n    }\n}\nexport {saveExpense, getExpenses};","/Volumes/D/Coding/imanage-react-app/src/serverRoutes/index.js",[],"/Volumes/D/Coding/imanage-react-app/src/screens/RegisterPage.js",["128"],"/Volumes/D/Coding/imanage-react-app/src/reducers/ExpenseReducers.js",["129"],"/Volumes/D/Coding/imanage-react-app/src/constants/DebitConstants.js",[],"/Volumes/D/Coding/imanage-react-app/src/reducers/CreditReducer.js",["130"],{"ruleId":"131","severity":1,"message":"132","line":5,"column":19,"nodeType":"133","messageId":"134","endLine":5,"endColumn":29},{"ruleId":"131","severity":1,"message":"135","line":5,"column":45,"nodeType":"133","messageId":"134","endLine":5,"endColumn":55},{"ruleId":"136","severity":1,"message":"137","line":34,"column":12,"nodeType":"138","endLine":34,"endColumn":14,"suggestions":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"131","severity":1,"message":"144","line":4,"column":10,"nodeType":"133","messageId":"134","endLine":4,"endColumn":19},{"ruleId":"140","replacedBy":"145"},{"ruleId":"142","replacedBy":"146"},{"ruleId":"131","severity":1,"message":"147","line":2,"column":15,"nodeType":"133","messageId":"134","endLine":2,"endColumn":28},{"ruleId":"136","severity":1,"message":"148","line":19,"column":91,"nodeType":"138","endLine":19,"endColumn":101,"suggestions":"149"},{"ruleId":"140","replacedBy":"150"},{"ruleId":"142","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":5,"column":1,"nodeType":"154","endLine":32,"endColumn":2},{"ruleId":"131","severity":1,"message":"155","line":11,"column":37,"nodeType":"133","messageId":"134","endLine":11,"endColumn":47},{"ruleId":"131","severity":1,"message":"156","line":13,"column":10,"nodeType":"133","messageId":"134","endLine":13,"endColumn":18},{"ruleId":"131","severity":1,"message":"157","line":14,"column":10,"nodeType":"133","messageId":"134","endLine":14,"endColumn":17},{"ruleId":"131","severity":1,"message":"158","line":5,"column":10,"nodeType":"133","messageId":"134","endLine":5,"endColumn":17},{"ruleId":"131","severity":1,"message":"156","line":5,"column":19,"nodeType":"133","messageId":"134","endLine":5,"endColumn":27},{"ruleId":"136","severity":1,"message":"137","line":24,"column":45,"nodeType":"138","endLine":24,"endColumn":47,"suggestions":"159"},{"ruleId":"136","severity":1,"message":"137","line":34,"column":44,"nodeType":"138","endLine":34,"endColumn":46,"suggestions":"160"},{"ruleId":"140","replacedBy":"161"},{"ruleId":"142","replacedBy":"162"},{"ruleId":"140","replacedBy":"163"},{"ruleId":"142","replacedBy":"164"},{"ruleId":"165","severity":1,"message":"166","line":12,"column":20,"nodeType":"167","endLine":12,"endColumn":81},{"ruleId":"131","severity":1,"message":"168","line":4,"column":19,"nodeType":"133","messageId":"134","endLine":4,"endColumn":26},{"ruleId":"136","severity":1,"message":"169","line":25,"column":7,"nodeType":"138","endLine":25,"endColumn":17,"suggestions":"170"},{"ruleId":"152","severity":1,"message":"153","line":5,"column":1,"nodeType":"154","endLine":25,"endColumn":2},{"ruleId":"152","severity":1,"message":"153","line":5,"column":1,"nodeType":"154","endLine":33,"endColumn":2},"no-unused-vars","'closeModal' is defined but never used.","Identifier","unusedVar","'formatDate' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["171"],"no-native-reassign",["172"],"no-negated-in-lhs",["173"],"'VscSignIn' is defined but never used.",["172"],["173"],"'useRouteMatch' is defined but never used.","React Hook useEffect has missing dependencies: 'isLoading', 'props.history', and 'redirect'. Either include them or remove the dependency array.",["174"],["172"],["173"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'useHistory' is defined but never used.","'userInfo' is defined but never used.","'connect' is defined but never used.","'headers' is defined but never used.",["175"],["176"],["172"],["173"],["172"],["173"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'user_id' is defined but never used.","React Hook useEffect has missing dependencies: 'props.history' and 'redirect'. Either include them or remove the dependency array.",["177"],{"desc":"178","fix":"179"},"no-global-assign","no-unsafe-negation",{"desc":"180","fix":"181"},{"desc":"178","fix":"182"},{"desc":"178","fix":"183"},{"desc":"184","fix":"185"},"Update the dependencies array to be: [dispatch]",{"range":"186","text":"187"},"Update the dependencies array to be: [isLoading, props.history, redirect, userInfo]",{"range":"188","text":"189"},{"range":"190","text":"187"},{"range":"191","text":"187"},"Update the dependencies array to be: [props.history, redirect, userInfo]",{"range":"192","text":"193"},[1231,1233],"[dispatch]",[778,788],"[isLoading, props.history, redirect, userInfo]",[899,901],[1430,1432],[950,960],"[props.history, redirect, userInfo]"]